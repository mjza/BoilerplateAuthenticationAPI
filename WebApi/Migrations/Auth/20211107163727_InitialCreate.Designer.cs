// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Helpers.Auth;

namespace WebApi.Migrations.Auth
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20211107163727_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApi.Entities.Auth.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("id");

                    b.Property<bool?>("AcceptTerms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("accept_terms")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("GenderId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("gender_id")
                        .HasDefaultValueSql("(N'f')");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("NationalityId")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("nationality_id");

                    b.Property<string>("Number")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("number");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("PasswordResetedAt")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("password_reseted_at");

                    b.Property<string>("PostCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("postcode");

                    b.Property<Guid?>("ProfessionId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("profession_id");

                    b.Property<string>("ResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reset_token");

                    b.Property<DateTime?>("ResetTokenExpiresAt")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("reset_token_expires_at");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("settings")
                        .HasDefaultValueSql("(N'{}')");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("street");

                    b.Property<string>("TitleId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("title_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("verification_token");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("verified_at");

                    b.HasKey("Id");

                    b.HasIndex("GenderId")
                        .HasDatabaseName("accounts_gender_id_foreign");

                    b.HasIndex("NationalityId")
                        .HasDatabaseName("accounts_nationality_id_foreign");

                    b.HasIndex("ProfessionId")
                        .HasDatabaseName("accounts_profession_id_foreign");

                    b.HasIndex("TitleId")
                        .HasDatabaseName("accounts_title_id_foreign");

                    b.ToTable("accounts", "AuthDBO");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AcceptTerms = true,
                            Birthday = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2019, 12, 30, 9, 10, 30, 0, DateTimeKind.Unspecified),
                            Email = "super1@gmail.com",
                            FirstName = "Super",
                            GenderId = "m",
                            LastName = "1",
                            NationalityId = "de",
                            Number = "137a",
                            PasswordHash = "$2a$11$4SCtOwrKu7yiigd3FO7dsOFNhKqYhhYsZFATQA.zFTMFLMZaLf0aq",
                            PostCode = "50825",
                            ProfessionId = new Guid("54a130d2-502f-4cf1-a376-63edeb000003"),
                            Role = 0,
                            Settings = "{}",
                            Street = "Bonnstr.",
                            TitleId = "mr",
                            VerifiedAt = new DateTime(2020, 1, 1, 9, 10, 30, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AcceptTerms = true,
                            Birthday = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2020, 1, 5, 9, 10, 30, 0, DateTimeKind.Unspecified),
                            Email = "admin1@gmail.com",
                            FirstName = "Admin",
                            GenderId = "m",
                            LastName = "1",
                            NationalityId = "de",
                            Number = "138a",
                            PasswordHash = "$2a$11$9hdhZHdGIdgdrvEgmuiebObt2cNrU3r2j1csn/1vSj8Q3wJyu4jyO",
                            PostCode = "53698",
                            ProfessionId = new Guid("54a130d2-502f-4cf1-a376-63edeb000001"),
                            Role = 1,
                            Settings = "{}",
                            Street = "Bonnstr.",
                            TitleId = "mr",
                            VerifiedAt = new DateTime(2020, 4, 1, 9, 10, 30, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            AcceptTerms = false,
                            Birthday = new DateTime(2000, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2020, 1, 7, 9, 10, 30, 0, DateTimeKind.Unspecified),
                            Email = "user1@gmail.com",
                            FirstName = "User",
                            GenderId = "m",
                            LastName = "1",
                            NationalityId = "de",
                            Number = "137c",
                            PasswordHash = "$2a$11$qtabamm1xnMZOB1PkuY4texhEFLlpcJ4O3cyvfF0skMmkdW2jtJti",
                            ProfessionId = new Guid("54a130d2-502f-4cf1-a376-63edeb000002"),
                            Role = 2,
                            Settings = "{}",
                            Street = "Alexstr.",
                            TitleId = "mr"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Auth.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("id");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("cities_country_id_foreign");

                    b.ToTable("cities", "AuthDBO");

                    b.HasData(
                        new
                        {
                            Id = new Guid("52a130d2-502f-4cf1-a376-63edeb000001"),
                            CountryId = "de",
                            Name = "Cologne"
                        },
                        new
                        {
                            Id = new Guid("52a130d2-502f-4cf1-a376-63edeb000002"),
                            CountryId = "de",
                            Name = "Bonn"
                        },
                        new
                        {
                            Id = new Guid("52a130d2-502f-4cf1-a376-63edeb000003"),
                            CountryId = "de",
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("52a130d2-502f-4cf1-a376-63edeb000004"),
                            CountryId = "us",
                            Name = "New Yourk"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<long>("TellCode")
                        .HasMaxLength(5)
                        .HasColumnType("bigint")
                        .HasColumnName("tell_code");

                    b.HasKey("Id");

                    b.ToTable("countries", "AuthDBO");

                    b.HasData(
                        new
                        {
                            Id = "de",
                            Name = "Germany",
                            TellCode = 0L
                        },
                        new
                        {
                            Id = "us",
                            Name = "USA",
                            TellCode = 0L
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Gender", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("genders", "AuthDBO");

                    b.HasData(
                        new
                        {
                            Id = "m",
                            Name = "Male"
                        },
                        new
                        {
                            Id = "f",
                            Name = "Female"
                        },
                        new
                        {
                            Id = "d",
                            Name = "Diversed"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Nationality", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("nationalities", "AuthDBO");

                    b.HasData(
                        new
                        {
                            Id = "de",
                            Name = "German"
                        },
                        new
                        {
                            Id = "us",
                            Name = "American"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("professions", "AuthDBO");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54a130d2-502f-4cf1-a376-63edeb000001"),
                            Name = "Others"
                        },
                        new
                        {
                            Id = new Guid("54a130d2-502f-4cf1-a376-63edeb000002"),
                            Name = "CEO"
                        },
                        new
                        {
                            Id = new Guid("54a130d2-502f-4cf1-a376-63edeb000003"),
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Auth.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by_ip");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("expires_at");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Replaced_by_token");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("revoked_by_ip");

                    b.Property<string>("Token")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("FK_RefreshToken_Accounts_AccountId");

                    b.ToTable("refresh_tokens", "AuthDBO");
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Title", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("titles", "AuthDBO");

                    b.HasData(
                        new
                        {
                            Id = "mr",
                            Name = "Mr."
                        },
                        new
                        {
                            Id = "mrs",
                            Name = "Mrs."
                        },
                        new
                        {
                            Id = "ms",
                            Name = "Ms."
                        },
                        new
                        {
                            Id = "dr",
                            Name = "Dr."
                        },
                        new
                        {
                            Id = "pr",
                            Name = "Prof."
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Account", b =>
                {
                    b.HasOne("WebApi.Entities.Auth.Gender", "Gender")
                        .WithMany("Accounts")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("accounts$accounts_gender_id_foreign")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Auth.Nationality", "Nationality")
                        .WithMany("Accounts")
                        .HasForeignKey("NationalityId")
                        .HasConstraintName("accounts$accounts_nationality_id_foreign");

                    b.HasOne("WebApi.Entities.Auth.Profession", "Profession")
                        .WithMany("Accounts")
                        .HasForeignKey("ProfessionId")
                        .HasConstraintName("accounts$accounts_profession_id_foreign");

                    b.HasOne("WebApi.Entities.Auth.Title", "Title")
                        .WithMany("Accounts")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("accounts$accounts_title_id_foreign");

                    b.Navigation("Gender");

                    b.Navigation("Nationality");

                    b.Navigation("Profession");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("WebApi.Entities.Auth.City", b =>
                {
                    b.HasOne("WebApi.Entities.Auth.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("cities$cities_country_id_foreign")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WebApi.Entities.Auth.RefreshToken", b =>
                {
                    b.HasOne("WebApi.Entities.Auth.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("refresh_tokens$FK_RefreshToken_Accounts_AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Account", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Gender", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Nationality", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Profession", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("WebApi.Entities.Auth.Title", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
